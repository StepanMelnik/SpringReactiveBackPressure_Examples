package com.sme.flux.service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javax.annotation.PostConstruct;

import org.springframework.stereotype.Service;

import com.sme.flux.builder.PojoGenericBuilder;
import com.sme.flux.model.ArticleName;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Article name service that provides a list of article names in memory.
 */
@Service
public class ArticleNameInMemoryService
{
    private static final int COUNT = 100;
    private final List<ArticleName> articleNames = new ArrayList<>();

    /**
     * Initialize data in memory.
     */
    @PostConstruct
    public void initialize()
    {
        // CSOFF
        List<ArticleName> collect = IntStream.range(1, COUNT)
                .mapToObj(id -> new PojoGenericBuilder<>(ArticleName::new)
                        .with(ArticleName::setId, id)
                        .with(ArticleName::setArtId, id % 2 == 0 ? 10 : 20)
                        .with(ArticleName::setDescription, "Autogenerated article description " + id)
                        .with(ArticleName::setName, "Autogenerated article name " + id)
                        .with(ArticleName::setLinkFriendlyName, "/en/articlename/" + id)
                        .with(ArticleName::setLangId, id % 2 == 0 ? 1 : 2)
                        .with(ArticleName::setActiveFlg, true)
                        .build())
                .collect(Collectors.toList());
        // CSON

        articleNames.addAll(collect);
    }

    /**
     * Fetch Flux instance of article names.
     * 
     * @return Returns the Flux instance of list of articles.
     */
    public Flux<ArticleName> findAll()
    {
        return Flux.fromStream(articleNames.stream());
    }

    /**
     * Fetch Mono of article name by id.
     * 
     * @param id The id of article name;
     * @return Returns Mono of article name by the given id.
     */
    public Mono<ArticleName> findById(long id)
    {
        return Mono.justOrEmpty(articleNames.stream()
                .filter(a -> a.getId() == id)
                .findFirst());
    }
}
